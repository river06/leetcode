

package hw;

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
    public static List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return null;
		
		ArrayList<Integer> pLevel = new ArrayList<Integer>();
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>(pLevel);
		Queue<TreeNode> queueNode = new LinkedList<TreeNode>(root);
		Queue<Integer> queueInt = new LinkedList<Integer>(1);

		int level_old = 1;
		
		while(!queueNode.isEmpty()) {
			TreeNode pTree = queueNode.remove();
			int level = queueInt.remove();

			pLevel.add(pTree.val);
			if(level_old != level) {
				pLevel = new ArrayList<Integer>( pTree.val);
				result.add(pLevel);
			}
			
			if(pTree.left != null) {
				queueNode.add(pTree.left);
				queueInt.add(level + 1);
			}
			if(pTree.right != null) {
				queueNode.add(pTree.right);
				queueInt.add(level + 1);
			}
			
		}

		return result;
    }
}